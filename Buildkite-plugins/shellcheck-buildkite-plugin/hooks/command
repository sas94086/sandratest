#!/bin/bash

set -euo pipefail

# Stolen from Buildkite's docker-compose plugin
########################################################################

# Show a prompt for a command
function plugin_prompt {
  # Output "$" prefix in a pleasant grey...
  echo -ne "\033[90m$\033[0m"

  # ...each positional parameter with spaces and correct escaping for copy/pasting...
  printf " %q" "$@"

  # ...and a trailing newline.
  echo
}

# Shows the command being run, and runs it
function plugin_prompt_and_run {
  plugin_prompt "$@"
  "$@"
}

########################################################################

if [[ ! -z "${BUILDKITE_PLUGIN_SHELLCHECK_OPTS:-}" ]]
then
    SHELLCHECK_OPTS=${BUILDKITE_PLUGIN_SHELLCHECK_OPTS}
else
    SHELLCHECK_OPTS=
fi

# Assemble all the files
collect_scripts(){
    local -a scripts

    if [[ ! -z "${BUILDKITE_PLUGIN_SHELLCHECK_SCRIPT:-}" ]]
    then
        scripts+=("${BUILDKITE_PLUGIN_SHELLCHECK_SCRIPT}")
    elif [[ ! -z "${BUILDKITE_PLUGIN_SHELLCHECK_SCRIPT_0:-}" ]]
    then
        local i=0
        local parameter="BUILDKITE_PLUGIN_SHELLCHECK_SCRIPT_${i}"
        while [[ -n "${!parameter:-}" ]]; do
            scripts+=("${!parameter}")
            i=$(( i+1 ))
            parameter="BUILDKITE_PLUGIN_SHELLCHECK_SCRIPT_${i}"
        done

    else
        echo "--- :skull:"
        exit 1
    fi

    echo "${scripts[@]}"
}

shellcheck() {
    docker run \
           --volume "$(pwd)":/src/ \
           --workdir=/src \
           --env SHELLCHECK_OPTS="${SHELLCHECK_OPTS}" \
           --tty \
           --rm \
           koalaman/shellcheck "$@"
}

version=$(shellcheck --version | grep "version: " | cut -f2 -d' ')

echo "+++ :shell: Checking scripts with Shellcheck v${version}"

# TODO: Collect error status as we loop through
for s in $(collect_scripts)
do
    plugin_prompt_and_run shellcheck "${s}"
done
